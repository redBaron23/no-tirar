generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("MIGRATION_DATABASE_URL")
}

enum UserRole {
  BUSINESS
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  IN_PROGRESS
  CANCELED
  COMPLETED
}

enum ProductStatus {
  ACTIVE
  ARCHIVED
}

enum ProductType {
  SURPRISE
  CLASSIC
}

enum BusinessType {
  BAKERY
  RESTAURANT_AND_CAFE
  OTHER
}

enum ContactMethodType {
  PHONE
  EMAIL
  WHATSAPP
}

enum PaymentMethodType {
  CASH
  CARD
  MP
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  address       String[]
  image         String?
  role          UserRole     @default(CUSTOMER)
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  messages      Message[]
  restaurants   Restaurant[]
  orders        Order[]
}

model Restaurant {
  id                 String            @id @default(cuid())
  name               String
  type               BusinessType
  phone              String?
  contactMethod      ContactMethodType
  description        String?
  address            String?
  profileImageUrl    String?
  backgroundImageUrl String?
  startTime          DateTime?
  endTime            DateTime?
  isSetupComplete    Boolean           @default(false)
  userId             String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  owner    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders   Order[]
  products Product[]
}

model Product {
  id           String        @id @default(cuid())
  name         String
  description  String?
  type         ProductType   @default(SURPRISE)
  status       ProductStatus @default(ACTIVE)
  category     String?
  regularPrice Decimal
  currentPrice Decimal
  quantity     Int
  salesCount   Int           @default(0)
  imageUrl     String?
  restaurantId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders     Order[]
}

model Order {
  id              String            @id @default(cuid())
  productQuantity Int
  totalAmount     Decimal
  status          OrderStatus       @default(IN_PROGRESS)
  paymentMethod   PaymentMethodType @default(CASH)
  userId          String
  restaurantId    String
  productId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  text      String
  chatId    String
  senderId  String
  createdAt DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
